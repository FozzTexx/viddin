#!/usr/bin/env python3
import argparse
import os, sys

def build_argparser():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("first", help="number of first episode")
  parser.add_argument("files", nargs="+", help="files to rename", default=".")
  parser.add_argument("--skip", type=int, help="use only every nth file")
  parser.add_argument("--dryrun", action="store_true", help="Don't actually rename files")
  return parser

def main():
  args = build_argparser().parse_args()

  start = args.first.split('x')
  season = int(start[0])
  episode = int(start[1])

  orig_name = args.files

  new_name = []
  skip = 1
  if args.skip:
    skip = args.skip
  for idx, old_file in enumerate(orig_name):
    path = os.path.dirname(old_file)
    base = os.path.basename(old_file)
    if idx % skip != 0:
      continue
    _, ext = os.path.splitext(base)
    new_file = "%ix%02i" % (season, episode + idx / skip) + ext
    new_path = os.path.join(path, new_file)
    new_name.append(new_path)

  # Don't try to rename anything that ended up with the same name
  old_to_new = list(zip(orig_name, new_name))
  for row in old_to_new:
    if row[0] == row[1]:
      orig_name.remove(row[0])
      new_name.remove(row[1])

  old_to_new = list(zip(orig_name, new_name))
  old_set = set(orig_name)
  new_set = set(new_name)

  if len(old_to_new) > 0:
    ordered = []
    while True:
      no_collision = list(new_set - old_set)
      if len(no_collision) == 0:
        print("Naming conflict")
        return 1
      no_collision.sort()
      will_rename = []
      for p in no_collision:
        for o in old_to_new:
          if p == o[1]:
            will_rename.append(o)
      old_to_new = [i for i in old_to_new if i not in will_rename]
      ordered.extend(will_rename)
      old_set.difference_update(set([i[0] for i in will_rename]))
      new_set.difference_update(set([i[1] for i in will_rename]))
      if len(old_to_new) == 0:
        break

    for old_path, new_path in ordered:
      if not os.path.exists(new_path):
        if not args.dryrun:
          os.rename(old_path, new_path)
        print("Renamed " + old_path + " to " + new_path)
      else:
        print("ALREADY EXISTS", new_path)
  
  return

if __name__ == '__main__':
  exit(main() or 0)

#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2018 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# FIXME - make this search for theme song:
# https://dev.to/hiisi13/find-an-audio-within-another-audio-in-10-lines-of-python-1866
# https://github.com/craigfrancis/audio-detect

import os
import argparse
import datetime
import sys
import re
from viddin import viddin

#offsets = [386.477, -403.925, -424.919, -427.431, 430.822]
#offsets = [-128.583, 175.652]

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("files", nargs="+", help="Video file to guess")
  parser.add_argument("--pattern", nargs="+", type=float, help="Pattern to look for")
  parser.add_argument("--add", action="store_true", help="add chapter if pattern found")
  return parser

def matchesPattern(pos, splits, pattern):
  testpattern = []
  for idx in range(len(pattern), 0, -1):
    testpattern.append(abs(splits[pos]) - abs(splits[pos - idx]))
  for idx, (a, b) in enumerate(zip(testpattern, pattern)):
    if abs(a - b) > 2:
      return False
  return True

def findCredits(filename, pattern, addFlag):
  video, ext = os.path.splitext(filename)

  viddin.findBlack(filename)
  viddin.findSilence(filename)

  black = viddin.loadSplits(video + ".blk")
  silence = viddin.loadSplits(video + ".sil")
  splits = []
  for row in black:
    match = viddin.bestSilence(row, silence)
    if match:
      splits.append((match[1] - match[0]) / 2 + match[0])
    else:
      splits.append(0 - ((row[1] - row[0]) / 2 + row[0]))

  vfile = viddin.VideoSpec(filename, None)
      
  for idx in range(len(pattern), len(splits)):
    if matchesPattern(idx, splits, pattern):
      pos = abs(splits[idx])
      doEdit = vfile.addChapters([viddin.Chapter(pos, "Skip Intro")])
      print("Setting opening for %s to %0.3f" % (filename, pos))
      if doEdit and addFlag:
        vfile.writeChapters()
      return

  print("Couldn't find opening for", filename)
  return
    
def main():
  args = build_argparser().parse_args()

  pattern = []
  for idx in range(len(args.pattern)-1):
    pattern.append(abs(args.pattern[-1]) - abs(args.pattern[idx]))

  for path in args.files:
    if not os.path.exists(path):
      print("No such file", path)
      exit(1)
    findCredits(path, pattern, args.add)
  return

if __name__ == '__main__':
  exit(main() or 0)

#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2016 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import tvdb_api
import sys
from operator import itemgetter
import argparse
import glob
import os
import re
import sys
import math
import csv

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from viddin import viddin

AIREDSEASON = 0
AIREDEPISODE = 1
DVDSEASON = 2
DVDEPISODE = 3
TITLE = 4
ORIGDATE = 5

CSV_EPISODE = 0
CSV_DVDEP = 1
CSV_ORIGDATE = 2
CSV_TITLE = 3

TVDB_DVDSEASON = "dvd_season"
TVDB_DVDEPNUM = "dvd_episodenumber"
if float(tvdb_api.__version__) >= 2.0:
  TVDB_DVDSEASON = "dvdSeason"
  TVDB_DVDEPNUM = "dvdEpisodeNumber"

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("series", help="Name of series on thetvdb.com")
  parser.add_argument("--rename", action="store_true", help="rename files to match dvd order")
  parser.add_argument("--dvdmissing", action="store_true", help="use episode data when dvd info is missing")
  parser.add_argument("--dvdignore", action="store_true", help="ignore dvd episode data")
  parser.add_argument("--enumerate", action="store_true", help="Episodes are in order but may have gaps")
  parser.add_argument("--first", default=1, help="Start enumeration at this number")
  parser.add_argument("--minsize", help="Ignore videos smaller than this")
  parser.add_argument("--dvdorder", action="store_true", help="keep episodes in DVD order")
  parser.add_argument("--airedorder", action="store_true", help="episodes are currently in aired order")
  parser.add_argument("--csv", action="store_true", help="output data as csv")
  parser.add_argument("--quiet", action="store_true", help="don't print errors about missing DVD info")
  parser.add_argument("--glob", help="pattern for finding videos", default="[0-9]x[0-9][0-9].mkv")
  parser.add_argument("--dryrun", action="store_true", help="Don't actually rename files")
  return parser
  
def formatEpisodeID(season, epnum):
  num = 0
  eporder = dvdorder
  if args.airedorder:
    eporder = airedorder
  for row in eporder:
    if row[DVDSEASON] == season:
      num += 1
  if num < 1:
    num = 1
  digits = int(math.floor(math.log(num, 10)) + 1)
  if digits < 2:
    digits = 2
  epid = "%%ix%%0%ii" % digits
  return epid % (season, epnum)

def findVideo(episode):
  guess = "\\b" + formatEpisodeID(episode[DVDSEASON], int(episode[DVDEPISODE])) + "\\b"
  indices = [i for i, x in enumerate(videos) if re.search(guess, x)]
  if not len(indices):
    guess = "\\b[sS]%02i[eE]%02i\\b" % (episode[DVDSEASON], int(episode[DVDEPISODE]))
    indices = [i for i, x in enumerate(videos) if re.search(guess, x)]
  if len(indices):
    return videos[indices[0]]
  return None  
  
def findEpisode(epid):
  eporder = dvdorder
  SCOL = DVDSEASON
  ECOL = DVDEPISODE
  if args.airedorder:
    SCOL = AIREDSEASON
    ECOL = AIREDEPISODE
    eporder = airedorder
  if type(epid) is int:
    epid = formatEpisodeID(eporder[epid][SCOL], eporder[epid][ECOL])

  episode = None
  epcount = 0
  dvdnum = re.split(" *x *", epid)
  dvdseason = int(re.sub("[^0-9]*", "", dvdnum[0]));
  dvdepisode = int(re.sub("[^0-9]*", "", dvdnum[1]));
  for row in eporder:
    if dvdseason == row[SCOL] and dvdepisode == int(row[ECOL]):
      if not episode:
        episode = []
      episode.append(row)
      epcount += 1
  if epcount == 1:
    episode = episode[0]
  return episode

# FIXME - make finding the file as smart as tvrenamer.pl
def renameVid(episode, filename=None):
  epinfo = episode
  if isinstance(episode[0], list):
    epinfo = episode[0]
    
  if args.dvdorder:
    epid = formatEpisodeID(epinfo[DVDSEASON], int(epinfo[DVDEPISODE]))
  else:
    epid = formatEpisodeID(epinfo[AIREDSEASON], int(epinfo[AIREDEPISODE]))
    
  if not filename:
    filename = findVideo(episode)

  if filename:
    video, ext = os.path.splitext(filename)

    if epinfo == episode:
      title = re.sub("[:/]", "-", re.sub("[.!?]+$", "", epinfo[TITLE].strip()))
    else:
      title = ""
      for ep in episode:
        if len(title):
          title += " / "
        title += ep[TITLE]
    title = re.sub("[:/]", "-", re.sub("[.!?]+$", "", title))
    
    if args.dvdorder:
      part = int((epinfo[DVDEPISODE] * 10) % 10)
      if part and title.endswith(" (" + str(part) + ")"):
        title = title[:-4]
    eptitle = "%s %s%s" % (epid, title, ext)
    if filename != eptitle:
      if not os.path.isfile(eptitle) or args.dryrun:
        if not args.dryrun:
          os.rename(filename, eptitle)
        print(filename + " to " + eptitle)
      else:
        print("Already exists! " + eptitle)
  return filename

def isint(s):
  try:
    int(s)
    return True
  except ValueError:
    return False
          
def main():
  args = build_argparser().parse_args()

  if os.path.isfile(args.series):
    series = viddin.loadEpisodeInfoCSV(args.series)
  else:
    series = viddin.loadEpisodeInfoTVDB(args.series, dvdIgnore=args.dvdignore,
                                        dvdMissing=args.dvdmissing, quietFlag=args.quiet)
    
  dvdorder = sorted(series, key=itemgetter(DVDSEASON, DVDEPISODE))
  airedorder = sorted(series, key=itemgetter(AIREDSEASON, AIREDEPISODE))

  videos = [file for file in glob.glob(args.glob)]
  videos.sort()

  minsize = 0
  if args.minsize:
    val = re.sub("^( *[0-9]+).*", "\\1", args.minsize)
    minsize = int(val)
    suffix = args.minsize[-1]
    try:
      magnitude = ["B", "K", "M", "G"].index(suffix.upper())
    except ValueError:
      magnitude = -1
    if magnitude >= 0:
      minsize *= math.pow(1024, magnitude)

  if args.csv:
    csvdata = []
    for row in dvdorder:
      info = [formatEpisodeID(row[AIREDSEASON], int(row[AIREDEPISODE])), \
              "%ix%04.1f" % (row[DVDSEASON], row[DVDEPISODE]), row[ORIGDATE], row[TITLE]]
      csvdata.append(info)

    a = csv.writer(sys.stdout)
    a.writerows(csvdata)
  elif args.rename:
    epnum = 0

    if isint(args.first):
      first = int(args.first)
    else:
      episode = findEpisode(args.first)
      if args.airedorder:
        first = airedorder.index(episode) + 1
      else:
        first = dvdorder.index(episode) + 1

    for filename in videos:
      if minsize:
        size = os.path.getsize(filename)
        if size < minsize:
          continue

      video, ext = os.path.splitext(filename)
      epid = video
      if args.enumerate:
        epid = epnum + first - 1
      episode = findEpisode(epid)
      if episode:
        filename = renameVid(episode, filename=filename)
      epnum += 1
  else:
    for row in dvdorder:
      print(dvdorder.index(row) + 1, end=" ")
      for info in row:
        print(info, end=" ")
      print()

  return

if __name__ == '__main__':
  exit(main() or 0)

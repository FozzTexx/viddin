#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2018 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import os
import argparse
import datetime
import tempfile
import sys
import re

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from viddin import viddin

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("file", help="Video file to examine")
  parser.add_argument("--fix", action="store_true", help="Fix first chapeter marker to start at exactly 0")
  parser.add_argument("--multiplier", type=float, help="Multiplier to shift chapter markers")
  parser.add_argument("--chapters", help="File containing list of chapters to replace existing markers")
  parser.add_argument("--add", nargs="+", help="Positions to add as chapters")
  parser.add_argument("--delete", nargs="+", help="Chapters to delete")
  parser.add_argument("--rename", nargs="+", help="Chapters to rename")
  return parser

def main():
  args = build_argparser().parse_args()

  video, ext = os.path.splitext(args.file)
  vfile = viddin.VideoSpec(args.file)
  if args.chapters:
    chapters = viddin.loadChapterFile(args.chapters)
  else:
    chapters = vfile.loadChapters()

  doEdit = False

  if not args.add is None:
    for pos in args.add:
      cidx = pos.find("=")
      cname = None
      if cidx > 0:
        cname = pos[cidx+1:]
        pos = pos[:cidx]
      pos = viddin.decodeTimecode(pos)
      chapters.append(viddin.Chapter(pos, cname))
    chapters.sort()
    named = []
    for idx, chp in enumerate(chapters):
      if chp.name is None:
        chp = viddin.Chapter(chp.position, "Chapter %i" % (idx + 1))
      named.append(chp)
    chapters = named
    doEdit = True

  if not args.delete is None:
    for pos in args.delete:
      offset = viddin.decodeTimecode(pos)
      for chap in chapters:
        if abs(chap.position - offset) < 2:
          chapters.remove(chap)
          doEdit = True
          break

  if not args.rename is None:
    for chp in args.rename:
      cidx = chp.find("=")
      if cidx < 0:
        print("Unknown chapter format: \"%s\"" % (chp), file=sys.stderr)
        exit(1)
      idx = int(chp[:cidx])
      name = chp[cidx+1:]
      if idx < 0 or idx >= len(chapters):
        print("Invalid chapter index: \"%s\"" % (chp), file=sys.stderr)
        exit(1)
      chapters[idx] = viddin.Chapter(chapters[idx].position, name)
      doEdit = True
      
  if args.multiplier:
    for idx in range(len(chapters)):
      chapters[idx] *= args.multiplier
    doEdit = True

  for idx in range(len(chapters) - 2, -1, -1):
    chap = chapters[idx].position
    nchap = chapters[idx+1].position
    if abs(chap - nchap) < 1:
      chapters[idx:idx+1] = []

  if args.fix or doEdit:
    chapters.sort()
    if len(chapters) > 0 and chapters[0].position < 2:
      chapters[0] = viddin.Chapter(0, chapters[0].name)
    else:
      chapters.insert(0, viddin.Chapter(0, "Chapter 1"))

    dedup = []
    [dedup.append(x.position) for x in chapters if x not in dedup]
    if len(dedup) != len(chapters):
      cleaned = []
      for chp in chapters:
        if chp.position in dedup:
          cleaned.append(chp)
          dedup.remove(chp.position)
      chapters = cleaned

    doEdit = True
  
  if doEdit:
    vfile.writeChapters(chapters)

  else:
    if len(chapters) == 0:
      print("No chapter markers")
    for i in range(len(chapters)):
      print("%s\t%s" % (chapters[i].name, viddin.formatChapter(chapters[i].position)))

  return

if __name__ == '__main__':
  exit(main() or 0)

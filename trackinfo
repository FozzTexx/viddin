#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2018 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import os
import sys
import argparse
import json
import xmltodict

parser = argparse.ArgumentParser()
parser.add_argument("source", help="input file")
parser.add_argument("--title", help="title number to rip")
parser.add_argument("--lang", help="only use subtitles in specified language")
args = parser.parse_args()

def trackWithUid(uid, tracks):
  for track in tracks:
    if 'uid' in track and uid == track['uid']:
      return track
  return None

def getTracks(path, title=None):
  tracks = []
  if title != None:
    cmd = "lsdvd -t %i -s %s" % (int(title), path)
    with os.popen(cmd) as f:
      for line in f:
        fields = line.split()
        if len(fields):
          key = None
          val = None
          end = False
          values = {}
          for field in fields[2:]:
            if field[-1] == ':':
              key = field[:-1]
            else:
              if field[-1] == ',':
                end = True
                field = field[:-1]
              if not val:
                val = field
              else:
                if not isinstance(val, list):
                  val = [val]
                val.append(field)
            if end:
              values[key] = val
              end = False
              key = None
              val = None
          tracks.append(values)
  else:
    cmd = "mkvmerge -i -F json \"%s\"" % (path)
    process = os.popen(cmd)
    jstr = process.read()
    process.close()
    jinfo = json.loads(jstr)

    for track in jinfo['tracks']:
      info = {'type': track['type']}
      info['rv_track_id'] = track['id']
      info.update(track['properties'])
      tracks.append(info)

    cmd = "mkvextract tags \"%s\"" % (path)
    process = os.popen(cmd)
    xstr = process.read()
    process.close()
    xstr = xstr.strip()
    if len(xstr):
      xinfo = xmltodict.parse(xstr)['Tags']
      xlist = []
      for track in xinfo:
        xi1 = xinfo[track]
        for xi2 in xi1:
          xdict = {}
          if 'Targets' in xi2:
            xi3 = xi2['Targets']
            if xi3 and 'TrackUID' in xi3:
              xdict['TrackUID'] = int(xi3['TrackUID'])
          if 'Simple' in xi2:
            xi3 = xi2['Simple']
            if type(xi3) == list:
              for xi4 in xi3:
                xdict[xi4['Name']] = xi4['String']
            else:
              xdict[xi3['Name']] = xi3['String']
          xlist.append(xdict)

      for track in xlist:
        if 'TrackUID' in track:
          tt = trackWithUid(track['TrackUID'], tracks)
          if tt:
            tt.update(track)
    
  return tracks

if not os.path.exists(args.source):
  print("Unable to locate " + args.source)
  sys.exit(1)
  
tracks = getTracks(args.source, args.title)
for track in tracks:
  info = "%i:" % (track['rv_track_id'])

  info += " Type=" + track['type']

  info += " Forced="
  if 'forced_track' in track and track['forced_track']:
    info += "Yes"
  else:
    info += "No"

  if 'uid' in track:
    info += " UID=%i" % (track['uid'])

  if 'language' in track:
    lang = track['language']
    if args.lang and lang != args.lang:
      continue
    info += " Language=%s" % (lang)
    
  if 'DURATION' in track:
    info += " Duration=%s" % (track['DURATION'])
    
  if 'NUMBER_OF_FRAMES' in track:
    info += " Frames=%s" % (track['NUMBER_OF_FRAMES'])
    
  if 'NUMBER_OF_BYTES' in track:
    info += " Bytes=%s" % (track['NUMBER_OF_BYTES'])
    
  if 'codec_id' in track:
    info += " Codec=%s" % (track['codec_id'])
    
  print(info)

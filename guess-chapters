#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2017 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import os
import argparse
import datetime
import tempfile
import sys
import re

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from viddin import viddin

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("file", help="Video file to guess")
  parser.add_argument("offsets", nargs="*", help="Approximate location of expected chapters")
  parser.add_argument("--force", action="store_true", help="Force a chapter at locations even if there's no matching silence")
  parser.add_argument("-a", "--add", action="store_true", help="Add chapters to existing chapters")
  parser.add_argument("--debug", action="store_true", help="Turn on debug output")
  parser.add_argument("--distance", default=10, help="Maximum number of seconds away from specified offset")
  return parser

def closestExpected(best):
  global expected

  begin = float(best[1])
  end = float(best[2])
  center = begin + (end - begin) / 2
  closest = None
  for offset in expected:
    diff = abs(offset - center)
    if not closest or diff < closest[0]:
      closest = [diff, center, begin, end]

  if closest:
    return [closest[2], closest[3]]
  return None
    
def main():
  args = build_argparser().parse_args()
  video, ext = os.path.splitext(args.file)

  viddin.findBlack(args.file)
  viddin.findSilence(args.file)

  black = viddin.loadSplits(video + ".blk")
  silence = viddin.loadSplits(video + ".sil")

  expected = None
  if len(args.offsets):
    expected = []
    for offset in args.offsets:
      expected.append(float(offset))

  splits = []
  for row in black:
    match = viddin.bestSilence(row, silence)
    if match:
      splits.append((match[1] - match[0]) / 2 + match[0])
    else:
      splits.append(0 - ((row[1] - row[0]) / 2 + row[0]))

  if expected:
    chapters = viddin.loadChapters(args.file)
    for offset in expected:
      bdiff = -1
      boffset = None
      for row in splits:
        if row >= 0 or args.force:
          diff = abs(offset - abs(row))
          if not boffset or diff < bdiff:
            bdiff = diff
            boffset = abs(row)
      if boffset and bdiff < args.distance:
        chapters.append(boffset)

    chapters.sort()
    if len(chapters) > 0 and chapters[0] < 2:
      chapters[0] = 0
    else:
      chapters.insert(0, 0)
    cfile, cfname = tempfile.mkstemp()

    for i in range(len(chapters)):
      os.write(cfile, bytes("CHAPTER%02i=%s\n" % (i + 1, viddin.formatChapter(chapters[i])),
                            "ASCII"))
      os.write(cfile, bytes("CHAPTER%02iNAME=Chapter %i\n" % (i + 1, i + 1), "ASCII"))
    os.close(cfile)

    cmd = "mkvpropedit -c %s \"%s\"" % (cfname, args.file.replace("\"", "\\\""))
    os.system(cmd)
    os.remove(cfname)

  else:
    for row in splits:
      if row >= 0 or args.force:
        print("%0.3f" % (row))

  return

if __name__ == '__main__':
  exit(main() or 0)

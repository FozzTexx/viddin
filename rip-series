#!/usr/bin/env python3
import argparse
import os
import subprocess
import viddin

def build_argparser():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("first", help="number of first episode")
  parser.add_argument("titles", nargs="+", help="title numbers to rip")
  parser.add_argument("--dvd", default="/dev/dvd", help="dvd device")
  parser.add_argument("--extension", default="mkv",
                      help="extension to use for output, default is mkv")

  parser.add_argument("--debug", action="store_true", help="print debug info")

  return parser

def main():
  args, unused = build_argparser().parse_known_args()

  if args.extension[0] != '.':
    args.extension = "." + args.extension

  start = args.first.split('x')
  season = int(start[0])
  episode = int(start[1])

  flags = unused
  do_eject = err = False
  sources = []
  for title in args.titles:
    if os.path.isdir(title):
      sources.extend(viddin.videosInDirectory(title))
    else:
      sources.append(["--title", title, args.dvd])
      do_eject = True

  for idx, source in enumerate(sources):
    cmd = ["rip-video"]
    cmd.extend(flags)
    epid = f"{season}x{episode+idx:02d}{args.extension}"
    if isinstance(source, (list, tuple)):
      cmd.extend(source)
    else:
      cmd.append(source)
    cmd.append(epid)
    if args.debug:
      print(viddin.listToShell(cmd))
    result = subprocess.run(cmd)
    if result.returncode:
      err = True
      break

  if not err and do_eject:
    cmd = ["eject", args.dvd]
    subprocess.run(cmd)

  return

if __name__ == '__main__':
  exit(main() or 0)

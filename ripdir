#!/usr/bin/env python3
import argparse
import os, glob
import sys
from viddin import viddin

FLAGS="--lang=eng --bluray"

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("dirs", nargs="+", help="input files")
  parser.add_argument("--flags", default=FLAGS, help="flags to pass to rip-video")
  parser.add_argument("--outtype", default=".mkv", help="file type to rip to")
  parser.add_argument("--dryrun", action="store_true", help="only print actions, don't rip")
  parser.add_argument("--subdirs", action="store_true", help="keep subdirectory organization")
  parser.add_argument("--debug", action="store_true", help="pass debug flag")
  return parser

def main():
  args = build_argparser().parse_args()
  for d in args.dirs:
    basedir = os.path.basename(os.path.abspath(d))
    files = []
    for ext in ("*.mkv", "*.mp4", "*.webm"):
      files.extend(glob.glob(os.path.join(d, ext)))
    for file in sorted(files):
      output = video = os.path.basename(file)
      if not args.subdirs:
        if not output.startswith(basedir):
          output = basedir + "_" + video
      else:
        output = os.path.join(basedir, video)
        os.makedirs(basedir, exist_ok=True)
      p, e = os.path.splitext(output)
      output = p + args.outtype
      log = p + ".log"

      doRip = False
      if not os.path.exists(log):
        print("Not ripped yet")
        doRip = True
      else:
        if os.path.exists(output):
          inlength = viddin.getLength(file)
          outlength = viddin.getLength(output)
          diff = inlength - outlength
          if diff > 20 or diff / inlength > 0.03:
            print("Short", diff, diff / inlength)
            doRip = True
        else:
          with open(log) as f:
            lines = f.read().splitlines()
            if len(lines) < 2 or lines[-2] != "Encode done!":
              print("Incomplete")
              doRip = True
      if doRip:
        print(output)
        cmd = "rip-video " + args.flags
        if args.debug:
          cmd += " --debug"
        cmd += " \"%s\" \"%s\"" % (file, output)
        print(cmd)
        if not args.dryrun:
          result = os.WEXITSTATUS(os.system(cmd))
          if result != 0:
            exit(result)
      else:
        print(output, "Skipped")
  return

if __name__ == '__main__':
  exit(main() or 0)

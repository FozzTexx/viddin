#!/usr/bin/env python
#
# Copyright 2016 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import argparse
import os
import datetime
import re
import math

parser = argparse.ArgumentParser()
parser.add_argument("filename", help="Video to split")
parser.add_argument("ranges", nargs="+", help="Split at offset(s) or ranges. Use negative number for offset from end. If argument is a filename, load offsets from it.")
parser.add_argument("--transcode", action="store_true", help="transcode video for perfect split points")
parser.add_argument("--output", help="name to use when creating splits")
args = parser.parse_args()

def splitVideo(pos, filename, before):
  print "Splitting"
  video, ext = os.path.splitext(filename)
  if before:
    start = "0:00.00"
    end = str(datetime.timedelta(seconds = pos))
    len = pos
  else:
    start = str(datetime.timedelta(seconds = pos))
    cmd = "vidinf %s | grep ID_LENGTH | sed -e 's/ID_LENGTH=//'" % filename
    process = os.popen(cmd)
    len = float(process.read())
    process.close()
    end = str(datetime.timedelta(seconds = len))
    len -= pos

  cmd = "mkvmerge --split parts:%s-%s -o %sb%s %s > /dev/null" % \
      (start, end, video, ext, filename)
  print cmd
  os.system(cmd)

  if before:
    splitname = "%s-pre%s" % (video, ext)
  else:
    splitname = "%s-post%s" % (video, ext)
    
  if os.path.exists(splitname):
    os.remove(splitname)
  cmd = "ffmpeg -i %sb%s -t %f -codec copy %s > /dev/null 2>&1" % (video, ext, len, splitname)
  os.system(cmd)
  os.remove("%sb%s" % (video, ext))
  print splitname

def decodeTimecode(tc):
  if re.match("^[-+]?[0-9]+(\.[0-9]+)?$", tc):
    seconds = float(tc)
  else:
    seconds = sum(int(x) * 60 ** i for i,x in enumerate(reversed(tc.split(":"))))
  return seconds

# FIXME - check if range is actually a file
segments = []
if len(args.ranges) == 1 and os.path.isfile(args.ranges[0]):
  ranges = []
  with open(args.ranges[0]) as f:
    for line in f:
      line = line.strip()
      if line[0] >= '0' and line[0] <= '9':
        ranges.append(line)
  args.ranges = ranges

for offset in args.ranges:
  if re.match("^[-+]?[0-9]+(\.[0-9]+)?$", offset) \
        or re.match("^[-+]?[0-9]+(:[0-9]+)+(\.[0-9]+)?$", offset):
    tc = decodeTimecode(offset)
    if offset[0] != '+':
      if len(segments) == 0:
        segments.append([0, tc])
      else:
        if not segments[-1][1]:
          segments[-1][1] = tc
    if tc > 0:
      segments.append([tc, None])
  elif re.match("^[0-9]+(.[0-9]+)?-[0-9]+(\.[0-9]+)?$", offset) \
        or re.match("^[0-9]+(:[0-9]+)+(\.[0-9]+)?-[0-9]+(:[0-9]+)+(\.[0-9]+)?$", offset):
    times = offset.split("-")
    segments.append([decodeTimecode(times[0]), decodeTimecode(times[1])])
  else:
    print "Unrecognized timecode " + offset

def splitVideo(range, filename, output=None):
  video, ext = os.path.splitext(filename)
  if not range[1]:
    cmd = "vidinf \"%s\" | grep ID_LENGTH | sed -e 's/ID_LENGTH=//'" % filename
    process = os.popen(cmd)
    len = float(process.read())
    process.close()
    range[1] = len

  if not output:
    output = "%sc%s" % (video, ext)

  temp = "split-%i%s" % (os.getpgid(0), ext)
  if os.path.exists(temp):
    os.remove(temp)
  cmd = "mkvmerge --split parts:%s-%s -o %s \"%s\" > /dev/null" % \
      (datetime.timedelta(seconds = range[0]), datetime.timedelta(seconds = range[1]),
       temp, filename)
  print cmd
  os.system(cmd)

  if os.path.exists(output):
    os.remove(output)
  len = range[1] - range[0]
  cmd = "ffmpeg -i %s -t %f -codec copy \"%s\" > /dev/null 2>&1" % (temp, len, output)
  print cmd
  os.system(cmd)
  os.remove(temp)
  return output

append = ""
if len(segments) > 1 or not args.output:
  digits = int(math.floor(math.log(len(segments), 10)) + 1)
  append = "_%%0%ii" % digits
  
video, ext = os.path.splitext(args.filename)
if args.output:
  ovid, oext = os.path.splitext(args.output)
else:
  ovid = video

for range in segments:
  output = ovid + append + ext
  if len(append):
    output = output % (segments.index(range) + 1)
  splitVideo(range, args.filename, output)
  
# FIXME - get keyframes/iframes to see how far off splitting will be

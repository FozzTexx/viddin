#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2019 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of viddin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import argparse
import os
import json
import xmltodict
import re
import tempfile
import shutil
import pty
import subprocess
import sys

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from viddin import viddin

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("files", nargs="*", help="input files")
  parser.add_argument("dest", help="output file")
  return parser

def main():
  args = build_argparser().parse_args()
  longest = None
  for vid in args.files:
    length = viddin.getLength(vid)
    if not longest or length > longest[1]:
      longest = (vid, length)

  cmd = "vidinf \"%s\" | egrep 'ID_VIDEO_WIDTH|ID_VIDEO_HEIGHT'" % (longest[0])
  process = os.popen(cmd)
  size = process.read()
  process.close()
  size = size.strip().split()
  dsize = {k:int(v) for k,v in (x.split("=") for x in size)}
  print(dsize)

  tmpdir = tempfile.mkdtemp()
  print(tmpdir)
  
  inputs = []
  for vid in args.files:
    if vid == longest[0]:
      inputs.append(os.path.abspath(vid))
    else:
      tmp, ext = os.path.splitext(vid)
      tmp += "_%i" % (args.files.index(vid)) + ext
      tmp = os.path.join(tmpdir, tmp)
      cmd = "ffmpeg -i \"%s\" -vf scale=%i:%i -c copy -vcodec libx264 -map 0 %s" % \
          (vid, dsize['ID_VIDEO_WIDTH'], dsize['ID_VIDEO_HEIGHT'], tmp)
      print(cmd)
      viddin.runCommand(cmd)
      inputs.append(tmp)

  # mergetxt = os.path.join(tmpdir, "merge.txt")
  # f = open(mergetxt, "w")
  # for vid in inputs:
  #   f.write("file '%s'\n" % (vid))
  # f.close()
  # cmd = "ffmpeg -f concat -i %s -c copy \"%s\"" % (mergetxt, args.dest)

  cmd = "mkvmerge -o \"%s\"" % (args.dest)
  for vid in inputs:
    idx = inputs.index(vid)
    if idx:
      cmd += " +"
    cmd += " \"%s\"" % (vid)

  print(cmd)
  viddin.runCommand(cmd)

  shutil.rmtree(tmpdir)

  return

if __name__ == '__main__':
  exit(main() or 0)
